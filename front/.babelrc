{
    "presets": [
        "react-app"
    ],
    "env": {
        "development" : {
            "plugins": [
                "babel-plugin-styled-components"
                // styled-components의 class명을 쉽게 알 수 있게 해주는 라이브러리.
            ]
        }
    }
}

// .babelrc : 서브셋 디렉토리 또는 파일에서 특정한 플러그인이나, 변형할 때 유용하다.
//            예를 들어, 프로젝트 내에 서드파티 라이브러리가 바벨에 의해 트랜스폼되기 원하지 않을 수 있다.
// babel.config.json : 여러 패키지 디렉토리를 가진 프로젝트에서 하나의 바벨 설정을 가져갈 때 유용합니다.
//                     보다 보편적으로 사용된다.

// babel : 최신 ES6, ES7 버전의 javascript코드를 ES5버전의 코드로 바꾸어주는 Node.js 패키지
//         자주 변하는 자바스크립트 최신 코드를 이해하지 못하는 웹 브라우저에서도 페이지에 접속할 수 있도록 해줍니다.
//         (컴퓨터 뿐만 아니라  스마트폰에서 사용하는 브라우저도 포함) \

// @babel/node :  Node.js 커맨드 라인에서 사용하는 명령어를 사용할 수 있게 해준다 (node > babel-node)
// @babel/core : 바벨의 핵심 기능이 담겨있는 기본 라이브러리
// @babel/cli : 커맨드 라인에서 바벨을 실행할 수 있는 라이브러리
// @babel/preset-"" : 바뀌어야 하는 코드를 검사하는 규칙
// @babel/preset-env : 기본 js코드 검사
// @babel/preset-flow : 플로우 코드 검사
// @babel/preset-typescript : 타입스크립트 코드 검사
// @babel/preset-react : 리액트 코드 검사
// @babel/polyfill : 오래된 브라우저에서도 ES6이상의 코드중 ES5 코드로 대체되지 않은 것들
//                   (promise,anync,await 등등)을 사용하도록 해주는 기능을 한다.


// cross-env : Mac과 Window에서 동일한 명령어로 환경변수를 설정하기 위해 사용합니다.
//             운영체제나 플랫폼에 종속되지 않고 동일한 방법으로 env 변수를 주입하는 방법이다.